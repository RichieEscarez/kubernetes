/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1

// This file contains a collection of methods that can be used from go-resful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser. (e.g. TODO(andronat):... || TODO:...) iff
// are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-generated-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE
func (AWSElasticBlockStoreVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "AWSElasticBlockStoreVolumeSource represents a Persistent Disk resource in AWS.\n\nAn AWS PD must exist and be formatted before mounting to a container. The disk must also be in the same AWS zone as the kubelet. A AWS PD can only be mounted on a single machine.",
		"volumeID":  "Unique id of the PD resource. Used to identify the disk in AWS. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore",
		"fsType":    "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\" Required. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore",
		"partition": "Partition on the disk to mount. If omitted, kubelet will attempt to mount the device name. Ex. For /dev/sda1, this field is \"1\", for /dev/sda, this field 0 or empty. Optional. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore",
		"readOnly":  "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. Optional. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore",
	}
}

func (Binding) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "Binding ties one object to another - for example, a pod is bound to a node by a scheduler.",
		"metadata": "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"target":   "Target is the object to bind to.",
	}
}

func (Capabilities) SwaggerDoc() map[string]string {
	return map[string]string{
		"":     "Capabilities represent POSIX capabilities that can be added or removed to a running container.",
		"add":  "Added capabilities",
		"drop": "Removed capabilities",
	}
}

func (ComponentCondition) SwaggerDoc() map[string]string {
	return map[string]string{
		"":        "ComponentCondition contains information for the condition of a component.",
		"type":    "Type of component condition, currently only Healthy.",
		"status":  "Current status of this component condition, one of True, False, Unknown.",
		"message": "Health check message received from the component.",
		"error":   "Error code from health check attempt (if any)",
	}
}

func (ComponentStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":           "ComponentStatus (and ComponentStatusList) holds the cluster validation info.",
		"metadata":   "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"conditions": "List of component conditions observed",
	}
}

func (ComponentStatusList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "ComponentStatusList is a list of ComponentStatus.",
		"metadata": "Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"items":    "List of component status objects.",
	}
}

func (Container) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                       "Container represents a single container that is expected to be run on the host.",
		"name":                   "Name of the container. This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated. Required.",
		"image":                  "Docker image name. Optional. See http://releases.k8s.io/HEAD/docs/user-guide/images.md",
		"command":                "The docker image's entrypoint is used if this is not provided. Entrypoint array. Not executed within a shell. Cannot be updated. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Optional. See http://releases.k8s.io/HEAD/docs/user-guide/containers.md#containers-and-commands",
		"args":                   "The docker image's cmd is used if this is not provided. Arguments to the entrypoint. Cannot be updated. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Optional. See http://releases.k8s.io/HEAD/docs/user-guide/containers.md#containers-and-commands",
		"workingDir":             "Container's working directory. Defaults to Docker's default. D efaults to image's default. Cannot be updated. Optional.",
		"ports":                  "List of ports to expose from the container. Cannot be updated.",
		"env":                    "List of environment variables to set in the container. Cannot be updated.",
		"resources":              "Compute Resources required by this container. Cannot be updated. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#resources",
		"volumeMounts":           "Pod volumes to mount into the container's filesyste. Cannot be updated.",
		"livenessProbe":          "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. See http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes",
		"readinessProbe":         "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. See http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes",
		"lifecycle":              "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
		"terminationMessagePath": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.",
		"imagePullPolicy":        "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. Optional. See http://releases.k8s.io/HEAD/docs/user-guide/images.md#updating-images",
		"securityContext":        "Security options the pod should run with. Optional. See http://releases.k8s.io/HEAD/docs/design/security_context.md",
		"stdin":                  "Whether this container should allocate a buffer for stdin in the container runtime. Default is false.",
		"tty":                    "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
	}
}

func (ContainerPort) SwaggerDoc() map[string]string {
	return map[string]string{
		"":              "ContainerPort represents a network port in a single container.",
		"name":          "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services. Optional.",
		"hostPort":      "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this. Optional.",
		"containerPort": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536. Required.",
		"protocol":      "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\". Optional.",
		"hostIP":        "What host IP to bind the external port to. Optional.",
	}
}

func (ContainerState) SwaggerDoc() map[string]string {
	return map[string]string{
		"":           "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.",
		"waiting":    "Details about a waiting container",
		"running":    "Details about a running container",
		"terminated": "Details about a terminated container",
	}
}

func (ContainerStateRunning) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "ContainerStateRunning is a running state of a container.",
		"startedAt": "Time at which the container was last (re-)started",
	}
}

func (ContainerStateTerminated) SwaggerDoc() map[string]string {
	return map[string]string{
		"":            "ContainerStateTerminated is a terminated state of a container.",
		"exitCode":    "Exit status from the last termination of the container",
		"signal":      "Signal from the last termination of the container",
		"reason":      "(brief) reason from the last termination of the container",
		"message":     "Message regarding the last termination of the container",
		"startedAt":   "Time at which previous execution of the container started",
		"finishedAt":  "Time at which the container last terminated",
		"containerID": "Container's ID in the format 'docker://<container_id>'",
	}
}

func (ContainerStateWaiting) SwaggerDoc() map[string]string {
	return map[string]string{
		"":       "ContainerStateWaiting is a waiting state of a container.",
		"reason": "(brief) reason the container is not yet running, such as pulling its image.",
	}
}

func (ContainerStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":             "ContainerStatus contains details for the current status of this container.",
		"name":         "This must be a DNS_LABEL. Each container in a pod must have a unique name. Required. Cannot be updated.",
		"state":        "Details about the container's current condition.",
		"lastState":    "Details about the container's last termination condition.",
		"ready":        "Specifies whether the container has passed its readiness probe.",
		"restartCount": "The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.",
		"image":        "The image the container is running. See http://releases.k8s.io/HEAD/docs/user-guide/images.md",
		"imageID":      "ImageID of the container's image.",
		"containerID":  "Container's ID in the format 'docker://<container_id>'. See http://releases.k8s.io/HEAD/docs/user-guide/container-environment.md#container-information",
	}
}

func (Daemon) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "Daemon represents the configuration of a daemon.",
		"metadata": "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"spec":     "Spec defines the specification of the desired behavior of this daemon. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
		"status":   "Status is the current status of this daemon. This data may be out of date by some window of time. Populated by the system. Read-only. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
	}
}

func (DaemonList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "DaemonList is a collection of daemon.",
		"metadata": "Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"items":    "Items is a list of daemons.",
	}
}

func (DaemonSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "DaemonSpec is the specification of a daemon.",
		"selector": "Selector is a label query over pods that are managed by the daemon. Must match in order to be controlled. If empty, defaulted to labels on Pod template. See http://releases.k8s.io/HEAD/docs/user-guide/labels.md#label-selectors",
		"template": "Template is the object that describes the pod that will be created. The Daemon will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). See http://releases.k8s.io/HEAD/docs/user-guide/replication-controller.md#pod-template",
	}
}

func (DaemonStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "DaemonStatus represents the current status of a daemon.",
		"currentNumberScheduled": "CurrentNumberScheduled is the number of nodes that are running exactly 1 copy of the daemon and are supposed to run the daemon.",
		"numberMisscheduled":     "NumberMisscheduled is the number of nodes that are running the daemon, but are not supposed to run the daemon.",
		"desiredNumberScheduled": "DesiredNumberScheduled is the total number of nodes that should be running the daemon (including nodes correctly running the daemon).",
	}
}

func (DeleteOptions) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                   "DeleteOptions may be provided when deleting an API object",
		"gracePeriodSeconds": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. Optional.",
	}
}

func (EmptyDirVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":       "EmptyDirVolumeSource is temporary directory that shares a pod's lifetime.",
		"medium": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. Optional. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#emptydir",
	}
}

func (EndpointAddress) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "EndpointAddress is a tuple that describes single IP address.",
		"ip":        "The IP of this endpoint.",
		"targetRef": "Reference to object providing the endpoint. Optional.",
	}
}

func (EndpointPort) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "EndpointPort is a tuple that describes a single port.",
		"name":     "The name of this port (corresponds to ServicePort.Name). Must be a DNS_LABEL. Optional only if one port is defined.",
		"port":     "The port number of the endpoint.",
		"protocol": "The IP protocol for this port. Must be UDP or TCP. Default is TCP.",
	}
}

func (EndpointSubset) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:\n  {\n    Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n    Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n  }\nThe resulting set of endpoints can be viewed as:\n    a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\n    b: [ 10.10.1.1:309, 10.10.2.2:309 ]",
		"addresses": "IP addresses which offer the related ports.",
		"ports":     "Port numbers available on the related IP addresses.",
	}
}

func (Endpoints) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "Endpoints is a collection of endpoints that implement the actual service. Example:\n  Name: \"mysvc\",\n  Subsets: [\n    {\n      Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n      Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n    {\n      Addresses: [{\"ip\": \"10.10.3.3\"}],\n      Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n    },\n ]",
		"metadata": "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"subsets":  "The set of all endpoints is the union of all subsets. Sets of addresses and ports that comprise a service.",
	}
}

func (EndpointsList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "EndpointsList is a list of endpoints.",
		"metadata": "Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"items":    "List of endpoints.",
	}
}

func (EnvVar) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "EnvVar represents an environment variable present in a Container.",
		"name":      "Name of the environment variable. Must be a C_IDENTIFIER. Required.",
		"value":     "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\". Optional.",
		"valueFrom": "Source for the environment variable's value. Cannot be used if value is not empty. Optional.",
	}
}

func (EnvVarSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "EnvVarSource represents a source for the value of an EnvVar.",
		"fieldRef": "Selects a field of the pod. Only name and namespace are supported. Required.",
	}
}

func (Event) SwaggerDoc() map[string]string {
	return map[string]string{
		"":               "Event is a report of an event somewhere in the cluster.",
		"metadata":       "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"involvedObject": "The object that this event is about. Required.",
		"reason":         "This should be a short, machine understandable string that gives the reason for the transition into the object's current status. Optional.",
		"message":        "A human-readable description of the status of this operation. Optional.",
		"source":         "The component reporting this event. Should be a short machine understandable string. Optional.",
		"firstTimestamp": "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)",
		"lastTimestamp":  "The time at which the most recent occurrence of this event was recorded.",
		"count":          "The number of times this event has occurred.",
	}
}

func (EventList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "EventList is a list of events.",
		"metadata": "Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"items":    "List of events",
	}
}

func (EventSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "EventSource contains information for an event.",
		"component": "Component from which the event is generated.",
		"host":      "Host name on which the event is generated.",
	}
}

func (ExecAction) SwaggerDoc() map[string]string {
	return map[string]string{
		"":        "ExecAction describes a \"run in container\" action.",
		"command": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
	}
}

func (GCEPersistentDiskVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "GCEPersistentDiskVolumeSource represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist and be formatted before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once.",
		"pdName":    "Unique name of the PD resource in GCE. Used to identify the disk in GCE. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk",
		"fsType":    "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\" Required. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk\"",
		"partition": "Partition on the disk to mount (e.g., '1' for /dev/sda1). If omitted, kubelet will attempt to mount the device name. Ex. For /dev/sda1, this field is \"1\", for /dev/sda, this field is 0 or empty. Optional. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk",
		"readOnly":  "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. Optional. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk",
	}
}

func (GitRepoVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":           "GitRepoVolumeSource represents a volume that is pulled from git when the pod is created.",
		"repository": "Repository URL",
		"revision":   "Commit hash for the specified revision. Optional.",
	}
}

func (GlusterfsVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "GlusterfsVolumeSource represents a Glusterfs Mount that lasts the lifetime of a pod.",
		"endpoints": "EndpointsName is the endpoint name that details Glusterfs topology. Required. See http://releases.k8s.io/HEAD/examples/glusterfs/README.md#create-a-pod",
		"path":      "Path is the Glusterfs volume path. Required. See http://releases.k8s.io/HEAD/examples/glusterfs/README.md#create-a-pod",
		"readOnly":  "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. Optional. See http://releases.k8s.io/HEAD/examples/glusterfs/README.md#create-a-pod",
	}
}

func (HTTPGetAction) SwaggerDoc() map[string]string {
	return map[string]string{
		"":       "HTTPGetAction describes an action based on HTTP Get requests.",
		"path":   "Path to access on the HTTP server. Optional.",
		"port":   "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. Required.",
		"host":   "Host name to connect to, defaults to the pod IP. Optional.",
		"scheme": "Scheme to use for connecting to the host. Defaults to HTTP. Optional.",
	}
}

func (Handler) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "Handler defines a specific action that should be taken",
		"exec":      "One and only one of the following should be specified. Exec specifies the action to take.",
		"httpGet":   "HTTPGet specifies the http request to perform.",
		"tcpSocket": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported",
	}
}

func (HostPathVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":     "HostPathVolumeSource represents bare host directory volume.",
		"path": "Path of the directory on the host. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#hostpath",
	}
}

func (ISCSIVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":             "ISCSIVolumeSource describes an ISCSI Disk can only be mounted as read/write once.",
		"targetPortal": "iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260). Required.",
		"iqn":          "Target iSCSI Qualified Name. Required.",
		"lun":          "iSCSI target lun number. Required.",
		"fsType":       "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\" Required.",
		"readOnly":     "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. Optional.",
	}
}

func (Lifecycle) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
		"postStart": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. See http://releases.k8s.io/HEAD/docs/user-guide/container-environment.md#hook-details",
		"preStop":   "PreStop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. See http://releases.k8s.io/HEAD/docs/user-guide/container-environment.md#hook-details",
	}
}

func (LimitRange) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "LimitRange sets resource usage limits for each kind of resource in a Namespace.",
		"metadata": "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"spec":     "Spec defines the limits enforced. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
	}
}

func (LimitRangeItem) SwaggerDoc() map[string]string {
	return map[string]string{
		"":        "LimitRangeItem defines a min/max usage limit for any resource that matches on kind.",
		"type":    "Type of resource that this limit applies to.",
		"max":     "Max usage constraints on this kind by resource name.",
		"min":     "Min usage constraints on this kind by resource name.",
		"default": "Default usage constraints on this kind by resource name. Default values on this kind by resource name if omitted.",
	}
}

func (LimitRangeList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "LimitRangeList is a list of LimitRange items.",
		"metadata": "Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"items":    "Items is a list of LimitRange objects. See http://releases.k8s.io/HEAD/docs/design/admission_control_limit_range.md",
	}
}

func (LimitRangeSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":       "LimitRangeSpec defines a min/max usage limit for resources that match on kind.",
		"limits": "Limits is the list of LimitRangeItem objects that are enforced.",
	}
}

func (List) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "List holds a list of objects, which may not be known by the server.",
		"metadata": "Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"items":    "List of objects",
	}
}

func (ListMeta) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                "ListMeta describes metadata that synthetic resources must have, including lists and various status objects.",
		"selfLink":        "SelfLink is a URL representing this object. Populated by the system. Read-only.",
		"resourceVersion": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency",
	}
}

func (ListOptions) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                "ListOptions is the query options to a standard REST list call.",
		"labelSelector":   "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
		"fieldSelector":   "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
		"watch":           "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
		"resourceVersion": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
	}
}

func (LoadBalancerIngress) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.",
		"ip":       "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)",
		"hostname": "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)",
	}
}

func (LoadBalancerStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":        "LoadBalancerStatus represents the status of a load-balancer.",
		"ingress": "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.",
	}
}

func (LocalObjectReference) SwaggerDoc() map[string]string {
	return map[string]string{
		"":     "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
		"name": "Name of the referent. See http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names",
	}
}

func (NFSVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "NFSVolumeSource represents an NFS mount that lasts the lifetime of a pod",
		"server":   "Server is the hostname or IP address of the NFS server. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs",
		"path":     "Path that is exported by the NFS server. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs",
		"readOnly": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. Optional. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs",
	}
}

func (Namespace) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "Namespace provides a scope for Names. Use of multiple namespaces is optional.",
		"metadata": "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"spec":     "Spec defines the behavior of the Namespace. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
		"status":   "Status describes the current status of a Namespace. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
	}
}

func (NamespaceList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "NamespaceList is a list of Namespaces.",
		"metadata": "Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"items":    "Items is the list of Namespace objects in the list. See http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md",
	}
}

func (NamespaceSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":           "NamespaceSpec describes the attributes on a Namespace.",
		"finalizers": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage. See http://releases.k8s.io/HEAD/docs/design/namespaces.md#finalizers",
	}
}

func (NamespaceStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":      "NamespaceStatus is information about the current status of a Namespace.",
		"phase": "Phase is the current lifecycle phase of the namespace. See http://releases.k8s.io/HEAD/docs/design/namespaces.md#phases",
	}
}

func (Node) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "Node is a worker node in Kubernetes, formerly known as minion. Each node will have a unique identifier in the cache (i.e. in etcd).",
		"metadata": "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"spec":     "Spec defines the behavior of a node. http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
		"status":   "Most recently observed status of the node. Populated by the system. Read-only. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
	}
}

func (NodeAddress) SwaggerDoc() map[string]string {
	return map[string]string{
		"":        "NodeAddress contains information for the node's address.",
		"type":    "Node address type, one of Hostname, ExternalIP or InternalIP.",
		"address": "The node address.",
	}
}

func (NodeCondition) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                   "NodeCondition contains condition infromation for a node.",
		"type":               "Type of node condition, currently only Ready.",
		"status":             "Status of the condition, one of True, False, Unknown.",
		"lastHeartbeatTime":  "Last time we got an update on a given condition.",
		"lastTransitionTime": "Last time the condition transit from one status to another.",
		"reason":             "(brief) reason for the condition's last transition.",
		"message":            "Human readable message indicating details about last transition.",
	}
}

func (NodeList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "NodeList is the whole list of all Nodes which have been registered with master.",
		"metadata": "Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"items":    "List of nodes",
	}
}

func (NodeSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":              "NodeSpec describes the attributes that a node is created with.",
		"podCIDR":       "PodCIDR represents the pod IP range assigned to the node.",
		"externalID":    "External ID of the node assigned by some machine database (e.g. a cloud provider). Deprecated.",
		"providerID":    "ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>",
		"unschedulable": "Unschedulable controls node schedulability of new pods. By default, node is schedulable. See http://releases.k8s.io/HEAD/docs/admin/node.md#manual-node-administration\"`",
	}
}

func (NodeStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":           "NodeStatus is information about the current status of a node.",
		"capacity":   "Capacity represents the available resources of a node. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#capacity for more details.",
		"phase":      "NodePhase is the recently observed lifecycle phase of the node. See http://releases.k8s.io/HEAD/docs/admin/node.md#node-phase",
		"conditions": "Conditions is an array of current observed node conditions. See http://releases.k8s.io/HEAD/docs/admin/node.md#node-condition",
		"addresses":  "List of addresses reachable to the node. Queried from cloud provider, if available. See http://releases.k8s.io/HEAD/docs/admin/node.md#node-addresses",
		"nodeInfo":   "NodeSystemInfo is a set of ids/uuids to uniquely identify the node. See http://releases.k8s.io/HEAD/docs/admin/node.md#node-info",
	}
}

func (NodeSystemInfo) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                        "NodeSystemInfo is a set of ids/uuids to uniquely identify the node.",
		"machineID":               "MachineID is the machine-id reported by the node.",
		"systemUUID":              "SystemUUID is the system-uuid reported by the node.",
		"bootID":                  "BootID is the boot-id reported by the node.",
		"kernelVersion":           "Kernel version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64)",
		"osImage":                 "OS image used reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy))",
		"containerRuntimeVersion": "Container runtime version reported by the node through runtime remote API (e.g. docker://1.5.0)",
		"kubeletVersion":          "Kubelet version reported by the node.",
		"kubeProxyVersion":        "Kube-proxy version reported by the node.",
	}
}

func (ObjectFieldSelector) SwaggerDoc() map[string]string {
	return map[string]string{
		"":           "ObjectFieldSelector selects an APIVersioned field of an object.",
		"apiVersion": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\". Optional.",
		"fieldPath":  "Path of the field to select in the specified API version. Required.",
	}
}

func (ObjectMeta) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                  "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
		"name":              "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. See http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names",
		"generateName":      "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nOptional. Applied only if Name is not specified. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency",
		"namespace":         "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. See http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md",
		"selfLink":          "SelfLink is a URL representing this object. Populated by the system. Read-only.",
		"uid":               "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. See http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids",
		"resourceVersion":   "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency",
		"generation":        "A sequence number representing a specific generation of the desired state. Currently only implemented by replication controllers. Populated by the system. Read-only.",
		"creationTimestamp": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"deletionTimestamp": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"labels":            "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. See http://releases.k8s.io/HEAD/docs/user-guide/labels.md",
		"annotations":       "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. See http://releases.k8s.io/HEAD/docs/user-guide/annotations.md",
	}
}

func (ObjectReference) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                "ObjectReference contains enough information to let you inspect or modify the referred object.",
		"kind":            "Kind of the referent. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"namespace":       "Namespace of the referent. See http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md",
		"name":            "Name of the referent. See http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names",
		"uid":             "UID of the referent. See http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids",
		"apiVersion":      "API version of the referent.",
		"resourceVersion": "Specific resourceVersion to which this reference is made, if any. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency",
		"fieldPath":       "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. Optional.",
	}
}

func (PersistentVolume) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md",
		"metadata": "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"spec":     "Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistent-volumes",
		"status":   "Status represents the current information/status for the persistent volume. Populated by the system. Read-only. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistent-volumes",
	}
}

func (PersistentVolumeClaim) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
		"metadata": "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"spec":     "Spec defines the desired characteristics of a volume requested by a pod author. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims",
		"status":   "Status represents the current information/status of a persistent volume claim. Read-only. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims",
	}
}

func (PersistentVolumeClaimList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "PersistentVolumeClaimList is a list of PersistentVolumeClaim items.",
		"metadata": "Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"items":    "A list of persistent volume claims. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims",
	}
}

func (PersistentVolumeClaimSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":            "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
		"accessModes": "AccessModes contains the desired access modes the volume should have. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#access-modes-1",
		"resources":   "Resources represents the minimum resources the volume should have. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#resources",
		"volumeName":  "VolumeName is the binding reference to the PersistentVolume backing this claim.",
	}
}

func (PersistentVolumeClaimStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":            "PersistentVolumeClaimStatus is the current status of a persistent volume claim.",
		"phase":       "Phase represents the current phase of PersistentVolumeClaim.",
		"accessModes": "AccessModes contains the actual access modes the volume backing the PVC has. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#access-modes-1",
		"capacity":    "Represents the actual resources of the underlying volume.",
	}
}

func (PersistentVolumeClaimVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
		"claimName": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims",
		"readOnly":  "Will force the ReadOnly setting in VolumeMounts. Optional. Default false.",
	}
}

func (PersistentVolumeList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "PersistentVolumeList is a list of PersistentVolume items.",
		"metadata": "Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"items":    "List of persistent volumes. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md",
	}
}

func (PersistentVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                     "PersistentVolumeSource is similar to VolumeSource but meant for the administrator who creates PVs. Exactly one of its members must be set.",
		"gcePersistentDisk":    "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk",
		"awsElasticBlockStore": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore",
		"hostPath":             "HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for development and testing only. On-host storage is not supported in any way. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#hostpath",
		"glusterfs":            "Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. See http://releases.k8s.io/HEAD/examples/glusterfs/README.md",
		"nfs":                  "NFS represents an NFS mount on the host. Provisioned by an admin. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs",
		"rbd":                  "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. See http://releases.k8s.io/HEAD/examples/rbd/README.md",
		"iscsi":                "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.",
	}
}

func (PersistentVolumeSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                              "PersistentVolumeSpec is the specification of a persistent volume.",
		"capacity":                      "A description of the persistent volume's resources and capacity. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#capacity",
		"accessModes":                   "AccessModes contains all ways the volume can be mounted. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#access-modes",
		"claimRef":                      "ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#binding",
		"persistentVolumeReclaimPolicy": "What happens to a persistent volume when released from its claim. Valid options are Retain (default) and Recycle. Recyling must be supported by the volume plugin underlying this persistent volume. Optional. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#recycling-policy",
	}
}

func (PersistentVolumeStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":        "PersistentVolumeStatus is the current status of a persistent volume.",
		"phase":   "Phase indicates if a volume is available, bound to a claim, or released by a claim. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#phase",
		"message": "A human-readable message indicating details about why the volume is in this state.",
		"reason":  "Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.",
	}
}

func (Pod) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.",
		"metadata": "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"spec":     "Specification of the desired behavior of the pod. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
		"status":   "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
	}
}

func (PodAttachOptions) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "PodAttachOptions is the query options to a Pod's remote attach call.",
		"stdin":     "Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.",
		"stdout":    "Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.",
		"stderr":    "Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.",
		"tty":       "TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.",
		"container": "The container in which to execute the command. Defaults to only container if there is only one container in the pod.",
	}
}

func (PodCondition) SwaggerDoc() map[string]string {
	return map[string]string{
		"":       "PodCondition contains details for the current condition of this pod.",
		"type":   "Type is the type of the condition. Currently only Ready. See http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#pod-conditions",
		"status": "Status is the status of the condition. Can be True, False, Unknown. See http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#pod-conditions",
	}
}

func (PodExecOptions) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "PodExecOptions is the query options to a Pod's remote exec call.",
		"stdin":     "Redirect the standard input stream of the pod for this call. Defaults to false.",
		"stdout":    "Redirect the standard output stream of the pod for this call. Defaults to true.",
		"stderr":    "Redirect the standard error stream of the pod for this call. Defaults to true.",
		"tty":       "TTY if true indicates that a tty will be allocated for the exec call. Allocate a terminal for this exec call. Defaults to false.",
		"container": "Container in which to execute the command. Defaults to only container if there is only one container in the pod.",
		"command":   "Command is the remote command to execute. argv array. Not executed within a shell.",
	}
}

func (PodList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "PodList is a list of Pods.",
		"metadata": "Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"items":    "List of pods. See http://releases.k8s.io/HEAD/docs/user-guide/pods.md",
	}
}

func (PodLogOptions) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "PodLogOptions is the query options for a Pod's logs REST call.",
		"container": "The container for which to stream logs. Defaults to only container if there is one container in the pod.",
		"follow":    "Follow the log stream of the pod. Defaults to false.",
		"previous":  "Return previous terminated container logs. Defaults to false.",
	}
}

func (PodProxyOptions) SwaggerDoc() map[string]string {
	return map[string]string{
		"":     "PodProxyOptions is the query options to a Pod's proxy call.",
		"path": "Path is the URL path to use for the current proxy request to pod.",
	}
}

func (PodSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                              "PodSpec is a description of a pod.",
		"volumes":                       "List of volumes that can be mounted by containers belonging to the pod. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md",
		"containers":                    "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. Required. See http://releases.k8s.io/HEAD/docs/user-guide/containers.md",
		"restartPolicy":                 "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. See http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#restartpolicy",
		"terminationGracePeriodSeconds": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.",
		"activeDeadlineSeconds":         "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
		"dnsPolicy":                     "Set DNS policy for containers within the pod. One of 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". Optional.",
		"nodeSelector":                  "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. See http://releases.k8s.io/HEAD/docs/user-guide/node-selection/README.md",
		"serviceAccountName":            "ServiceAccountName is the name of the ServiceAccount to use to run this pod. See http://releases.k8s.io/HEAD/docs/design/service_accounts.md",
		"serviceAccount":                "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.",
		"nodeName":                      "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.",
		"hostNetwork":                   "Host networking requested for this pod. Uses the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false. Optional.",
		"imagePullSecrets":              "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. See http://releases.k8s.io/HEAD/docs/user-guide/images.md#specifying-imagepullsecrets-on-a-pod",
	}
}

func (PodStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                  "PodStatus represents information about the status of a pod. Status may trail the actual state of a system.",
		"phase":             "Current condition of the pod. See http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#pod-phase",
		"conditions":        "Current service state of pod. See http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#pod-conditions",
		"message":           "A human readable message indicating details about why the pod is in this condition.",
		"reason":            "A brief CamelCase message indicating details about why the pod is in this state. e.g. 'OutOfDisk'",
		"hostIP":            "IP address of the host to which the pod is assigned. Empty if not yet scheduled.",
		"podIP":             "IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.",
		"startTime":         "RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.",
		"containerStatuses": "The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. See http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-statuses",
	}
}

func (PodStatusResult) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "PodStatusResult is a wrapper for PodStatus returned by kubelet that can be encode/decoded",
		"metadata": "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"status":   "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
	}
}

func (PodTemplate) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "PodTemplate describes a template for creating copies of a predefined pod.",
		"metadata": "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"template": "Template defines the pods that will be created from this pod template. http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
	}
}

func (PodTemplateList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "PodTemplateList is a list of PodTemplates.",
		"metadata": "Standard list metadata.\n See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"items":    "List of pod templates",
	}
}

func (PodTemplateSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "PodTemplateSpec describes the data a pod should have when created from a template",
		"metadata": "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"spec":     "Specification of the desired behavior of the pod. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
	}
}

func (Probe) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "Probe describes a liveness probe to be examined to the container.",
		"initialDelaySeconds": "Number of seconds after the container has started before liveness probes are initiated. See http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes\"",
		"timeoutSeconds":      "Number of seconds after which liveness probes timeout. Defaults to 1 second. See http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes",
	}
}

func (RBDVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "RBDVolumeSource represents a Rados Block Device Mount that lasts the lifetime of a pod",
		"monitors":  "CephMonitors is a collection of Ceph monitors. Required. See http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it",
		"image":     "RBDImage is the rados image name. Required. See http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it",
		"fsType":    "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\" Required. See http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it.",
		"pool":      "RadosPool is the rados pool name. Default is rbd. Optional. See http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it.",
		"user":      "RBDUser is the rados user name. Default is admin. Optional. See http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it",
		"keyring":   "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. Optional. See http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it",
		"secretRef": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is empty. Optional. See http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it",
		"readOnly":  "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. Optional. See http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it",
	}
}

func (RangeAllocation) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "RangeAllocation is not a public type.",
		"metadata": "ObjectMeta is a Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"range":    "Range is string that identifies the range represented by 'data'. Required.",
		"data":     "Data is a bit array containing all allocated addresses in the previous segment.",
	}
}

func (ReplicationController) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "ReplicationController represents the configuration of a replication controller.",
		"metadata": "If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"spec":     "Spec defines the specification of the desired behavior of the replication controller. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
		"status":   "Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
	}
}

func (ReplicationControllerList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "ReplicationControllerList is a collection of replication controllers.",
		"metadata": "Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"items":    "List of replication controllers. See http://releases.k8s.io/HEAD/docs/user-guide/replication-controller.md",
	}
}

func (ReplicationControllerSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "ReplicationControllerSpec is the specification of a replication controller.",
		"replicas": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. See http://releases.k8s.io/HEAD/docs/user-guide/replication-controller.md#what-is-a-replication-controller",
		"selector": "Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. See http://releases.k8s.io/HEAD/docs/user-guide/labels.md#label-selectors",
		"template": "Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. See http://releases.k8s.io/HEAD/docs/user-guide/replication-controller.md#pod-template",
	}
}

func (ReplicationControllerStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                   "ReplicationControllerStatus represents the current status of a replication controller.",
		"replicas":           "Replicas is the most recently oberved number of replicas. See http://releases.k8s.io/HEAD/docs/user-guide/replication-controller.md#what-is-a-replication-controller",
		"observedGeneration": "ObservedGeneration reflects the generation of the most recently observed replication controller.",
	}
}

func (ResourceQuota) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "ResourceQuota sets aggregate quota restrictions enforced per namespace",
		"metadata": "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"spec":     "Spec defines the desired quota. http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
		"status":   "Status defines the actual enforced quota and its current usage. http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
	}
}

func (ResourceQuotaList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "ResourceQuotaList is a list of ResourceQuota items.",
		"metadata": "Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"items":    "Items is a list of ResourceQuota objects. See http://releases.k8s.io/HEAD/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota",
	}
}

func (ResourceQuotaSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":     "ResourceQuotaSpec defines the desired hard limits to enforce for Quota.",
		"hard": "Hard is the set of desired hard limits for each named resource. See http://releases.k8s.io/HEAD/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota",
	}
}

func (ResourceQuotaStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":     "ResourceQuotaStatus defines the enforced hard limits and observed use.",
		"hard": "Hard is the set of enforced hard limits for each named resource. See http://releases.k8s.io/HEAD/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota",
		"used": "Used is the current observed total usage of the resource in the namespace.",
	}
}

func (ResourceRequirements) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "ResourceRequirements describes the compute resource requirements.",
		"limits":   "Limits describes the maximum amount of compute resources allowed. See http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications",
		"requests": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. See http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications",
	}
}

func (SELinuxOptions) SwaggerDoc() map[string]string {
	return map[string]string{
		"":      "SELinuxOptions are the labels to be applied to the container",
		"user":  "User is a SELinux user label that applies to the container. See http://releases.k8s.io/HEAD/docs/user-guide/labels.md",
		"role":  "Role is a SELinux role label that applies to the container. See http://releases.k8s.io/HEAD/docs/user-guide/labels.md",
		"type":  "Type is a SELinux type label that applies to the container. See http://releases.k8s.io/HEAD/docs/user-guide/labels.md",
		"level": "Level is SELinux level label that applies to the container. See http://releases.k8s.io/HEAD/docs/user-guide/labels.md",
	}
}

func (Secret) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.",
		"metadata": "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"data":     "Data contains the secret data. Each key must be a valid DNS_SUBDOMAIN or leading dot followed by valid DNS_SUBDOMAIN. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
		"type":     "Used to facilitate programmatic handling of secret data.",
	}
}

func (SecretList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "SecretList is a list of Secret.",
		"metadata": "Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"items":    "Items is a list of secret objects. See http://releases.k8s.io/HEAD/docs/user-guide/secrets.md",
	}
}

func (SecretVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":           "SecretVolumeSource adapts a Secret into a VolumeSource. See http://releases.k8s.io/HEAD/docs/design/secrets.md",
		"secretName": "SecretName is the name of a secret in the pod's namespace. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#secrets",
	}
}

func (SecurityContext) SwaggerDoc() map[string]string {
	return map[string]string{
		"":               "SecurityContext holds security configuration that will be applied to a container. SecurityContext contains duplication of some existing fields from the Container resource. These duplicate fields will be populated based on the Container configuration if they are not set. Defining them on both the Container AND the SecurityContext will result in an error.",
		"capabilities":   "Capabilities are the capabilities to add/drop when running the container Must match Container.Capabilities or be unset. Will be defaulted to Container.Capabilities if left unset The linux capabilites that should be added or removed. See http://releases.k8s.io/HEAD/docs/design/security_context.md#security-context",
		"privileged":     "Run the container in privileged mode. Must match Container.Privileged or be unset. Will be defaulted to Container.Privileged if left unset. See http://releases.k8s.io/HEAD/docs/design/security_context.md#security-context",
		"seLinuxOptions": "SELinuxOptions are the labels to be applied to the container and volumes. Options that control the SELinux labels applied. See http://releases.k8s.io/HEAD/docs/design/security_context.md#security-context",
		"runAsUser":      "RunAsUser is the UID to run the entrypoint of the container process. The user id that runs the first process in the container. See http://releases.k8s.io/HEAD/docs/design/security_context.md#security-context",
		"runAsNonRoot":   "RunAsNonRoot indicates that the container should be run as a non-root user. If the RunAsUser field is not explicitly set then the kubelet may check the image for a specified user or perform defaulting to specify a user.",
	}
}

func (SerializedReference) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "SerializedReference is a reference to serialized object.",
		"reference": "The reference to an object in the system.",
	}
}

func (Service) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.",
		"metadata": "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"spec":     "Spec defines the behavior of a service. http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
		"status":   "Most recently observed status of the service. Populated by the system. Read-only. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
	}
}

func (ServiceAccount) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                 "ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets",
		"metadata":         "Standard object's metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
		"secrets":          "Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. See http://releases.k8s.io/HEAD/docs/user-guide/secrets.md",
		"imagePullSecrets": "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. See http://releases.k8s.io/HEAD/docs/user-guide/secrets.md#manually-specifying-an-imagepullsecret",
	}
}

func (ServiceAccountList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "ServiceAccountList is a list of ServiceAccount objects",
		"metadata": "Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"items":    "List of ServiceAccounts. See http://releases.k8s.io/HEAD/docs/design/service_accounts.md#service-accounts",
	}
}

func (ServiceList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "ServiceList holds a list of services.",
		"metadata": "Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"items":    "List of services",
	}
}

func (ServicePort) SwaggerDoc() map[string]string {
	return map[string]string{
		"":           "ServicePort conatins information on service's port.",
		"name":       "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service.",
		"protocol":   "The IP protocol for this port. Supports \"TCP\" and \"UDP\". Default is TCP. Optional.",
		"port":       "The port that will be exposed by this service. Required.",
		"targetPort": "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of Port is used (an identity map). Defaults to the service port. Optional. See http://releases.k8s.io/HEAD/docs/user-guide/services.md#defining-a-service",
		"nodePort":   "The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. See http://releases.k8s.io/HEAD/docs/user-guide/services.md#type--nodeport",
	}
}

func (ServiceSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                    "ServiceSpec describes the attributes that a user creates on a service.",
		"ports":               "The list of ports that are exposed by this service. Required. See http://releases.k8s.io/HEAD/docs/user-guide/services.md#virtual-ips-and-service-proxies",
		"selector":            "This service will route traffic to pods having labels matching this selector. Label keys and values that must match in order to receive traffic for this service. If empty, all pods are selected, if not specified, endpoints must be manually specified. See http://releases.k8s.io/HEAD/docs/user-guide/services.md#overview",
		"clusterIP":           "ClusterIP is usually assigned by the master and is the IP address of the service. If specified, it will be allocated to the service if it is unused or else creation of the service will fail. Valid values are None, empty string (\"\"), or a valid IP address. 'None' can be specified for a headless service when proxying is not required. Cannot be updated. See http://releases.k8s.io/HEAD/docs/user-guide/services.md#virtual-ips-and-service-proxies",
		"type":                "Type of exposed service. Must be ClusterIP, NodePort, or LoadBalancer. Defaults to ClusterIP. See http://releases.k8s.io/HEAD/docs/user-guide/services.md#external-services",
		"deprecatedPublicIPs": "PublicIPs are used by external load balancers, or can be set by users to handle external traffic that arrives at a node. Externally visible IPs (e.g. load balancers) that should be proxied to this service. Deprecated.",
		"sessionAffinity":     "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. Optional. See http://releases.k8s.io/HEAD/docs/user-guide/services.md#virtual-ips-and-service-proxies",
	}
}

func (ServiceStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":             "ServiceStatus represents the current status of a service.",
		"loadBalancer": "LoadBalancer contains the current status of the load-balancer, if one is present.",
	}
}

func (Status) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "Status is a return value for calls that don't return other objects.",
		"metadata": "Standard list metadata. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"status":   "Status of the operation. One of: \"Success\" or \"Failure\". See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
		"message":  "A human-readable description of the status of this operation.",
		"reason":   "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
		"details":  "Extended data associated with the reason. Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.",
		"code":     "Suggested HTTP return code for this status, 0 if not set.",
	}
}

func (StatusCause) SwaggerDoc() map[string]string {
	return map[string]string{
		"":        "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
		"reason":  "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
		"message": "A human-readable description of the cause of the error. This field may be presented as-is to a reader.",
		"field":   "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed. Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
	}
}

func (StatusDetails) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                  "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
		"name":              "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
		"kind":              "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"causes":            "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
		"retryAfterSeconds": "If specified, the time in seconds before the operation should be retried.",
	}
}

func (TCPSocketAction) SwaggerDoc() map[string]string {
	return map[string]string{
		"":     "TCPSocketAction describes an action based on opening a socket",
		"port": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. Required.",
	}
}

func (TypeMeta) SwaggerDoc() map[string]string {
	return map[string]string{
		"":           "TypeMeta describes an individual object in an API response or request with strings representing the type of the object and its API schema version. Structures that are versioned or persisted should inline TypeMeta.",
		"kind":       "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
		"apiVersion": "APIVersion defines the version of the schema of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. See http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
	}
}

func (Volume) SwaggerDoc() map[string]string {
	return map[string]string{
		"":     "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
		"name": "Volume's name. Must be a DNS_LABEL and unique within the pod. Required. See http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names",
	}
}

func (VolumeMount) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "VolumeMount describes a mounting of a Volume within a container.",
		"name":      "This must match the Name of a Volume. Required.",
		"readOnly":  "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. Optional.",
		"mountPath": "Path within the container at which the volume should be mounted. Required.",
	}
}

func (VolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                      "VolumeSource represents the source location of a volume to mount. Only one of its members may be specified.",
		"hostPath":              "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#hostpath",
		"emptyDir":              "EmptyDir represents a temporary directory that shares a pod's lifetime. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#emptydir",
		"gcePersistentDisk":     "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk",
		"awsElasticBlockStore":  "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore",
		"gitRepo":               "GitRepo represents a git repository at a particular revision.",
		"secret":                "Secret represents a secret that should populate this volume. See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#secrets",
		"nfs":                   "NFS represents an NFS mount on the host that shares a pod's lifetime See http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs",
		"iscsi":                 "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. See http://releases.k8s.io/HEAD/examples/iscsi/README.md",
		"glusterfs":             "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. See http://releases.k8s.io/HEAD/examples/glusterfs/README.md",
		"persistentVolumeClaim": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. See http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims",
		"rbd": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. See http://releases.k8s.io/HEAD/examples/rbd/README.md",
	}
}

// AUTO-GENERATED FUNCTIONS END HERE

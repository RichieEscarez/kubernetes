/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package api

// This file contains a collection of methods that can be used from go-resful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser. (e.g. TODO(andronat):... || TODO:...) iff
// are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-generated-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE
func (AWSElasticBlockStoreVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "AWSElasticBlockStoreVolumeSource represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist and be formatted before mounting to a container. The disk must also be in the same AWS zone as the kubelet. A AWS EBS disk can only be mounted as read/write once.",
		"volumeID":  "Unique id of the persistent disk resource. Used to identify the disk in AWS",
		"fsType":    "Required: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\"",
		"partition": "Optional: Partition on the disk to mount. If omitted, kubelet will attempt to mount the device name. Ex. For /dev/sda1, this field is \"1\", for /dev/sda, this field is 0 or empty.",
		"readOnly":  "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
	}
}

func (Binding) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "Binding ties one object to another - for example, a pod is bound to a node by a scheduler.",
		"metadata": "ObjectMeta describes the object that is being bound.",
		"target":   "Target is the object to bind to.",
	}
}

func (Capabilities) SwaggerDoc() map[string]string {
	return map[string]string{
		"":     "Capabilities represent POSIX capabilities that can be added or removed to a running container.",
		"add":  "Added capabilities",
		"drop": "Removed capabilities",
	}
}

func (ComponentStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "ComponentStatus (and ComponentStatusList) holds the cluster validation info.",
	}
}

func (Container) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                       "Container represents a single container that is expected to be run on the host.",
		"name":                   "Required: This must be a DNS_LABEL.  Each container in a pod must have a unique name.",
		"image":                  "Required.",
		"command":                "Optional: The docker image's entrypoint is used if this is not provided; cannot be updated. Variable references $(VAR_NAME) are expanded using the container's environment.  If a variable cannot be resolved, the reference in the input string will be unchanged.  The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME).  Escaped references will never be expanded, regardless of whether the variable exists or not.",
		"args":                   "Optional: The docker image's cmd is used if this is not provided; cannot be updated. Variable references $(VAR_NAME) are expanded using the container's environment.  If a variable cannot be resolved, the reference in the input string will be unchanged.  The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME).  Escaped references will never be expanded, regardless of whether the variable exists or not.",
		"workingDir":             "Optional: Defaults to Docker's default.",
		"resources":              "Compute resource requirements.",
		"terminationMessagePath": "Required.",
		"imagePullPolicy":        "Required: Policy for pulling images for this container",
		"securityContext":        "Optional: SecurityContext defines the security options the pod should be run with",
		"stdin":                  "Variables for interactive containers, these have very specialized use-cases (e.g. debugging) and shouldn't be used for general purpose containers.",
	}
}

func (ContainerPort) SwaggerDoc() map[string]string {
	return map[string]string{
		"":              "ContainerPort represents a network port in a single container",
		"name":          "Optional: If specified, this must be an IANA_SVC_NAME  Each named port in a pod must have a unique name.",
		"hostPort":      "Optional: If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort.",
		"containerPort": "Required: This must be a valid port number, 0 < x < 65536.",
		"protocol":      "Required: Supports \"TCP\" and \"UDP\".",
		"hostIP":        "Optional: What host IP to bind the external port to.",
	}
}

func (ContainerState) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.",
	}
}

func (ContainerStateWaiting) SwaggerDoc() map[string]string {
	return map[string]string{
		"reason": "Reason could be pulling image,",
	}
}

func (ContainerStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"name":         "Each container in a pod must have a unique name.",
		"ready":        "Ready specifies whether the conatiner has passed its readiness check.",
		"restartCount": "Note that this is calculated from dead containers.  But those containers are subject to garbage collection.  This value will get capped at 5 by GC.",
	}
}

func (Daemon) SwaggerDoc() map[string]string {
	return map[string]string{
		"":       "Daemon represents the configuration of a daemon.",
		"spec":   "Spec defines the desired behavior of this daemon.",
		"status": "Status is the current status of this daemon. This data may be out of date by some window of time.",
	}
}

func (DaemonList) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "DaemonList is a collection of daemon.",
	}
}

func (DaemonSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "DaemonSpec is the specification of a daemon.",
		"selector": "Selector is a label query over pods that are managed by the daemon.",
		"template": "Template is the object that describes the pod that will be created. The Daemon will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified).",
	}
}

func (DaemonStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "DaemonStatus represents the current status of a daemon.",
		"currentNumberScheduled": "CurrentNumberScheduled is the number of nodes that are running exactly 1 copy of the daemon and are supposed to run the daemon.",
		"numberMisscheduled":     "NumberMisscheduled is the number of nodes that are running the daemon, but are not supposed to run the daemon.",
		"desiredNumberScheduled": "DesiredNumberScheduled is the total number of nodes that should be running the daemon (including nodes correctly running the daemon).",
	}
}

func (DeleteOptions) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                   "DeleteOptions may be provided when deleting an API object",
		"gracePeriodSeconds": "Optional duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used.",
	}
}

func (EmptyDirVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":       "EmptyDirVolumeSource represents an empty directory for a pod.",
		"medium": "media more like a scheduling problem - user says what traits they need, we give them a backing store that satisifies that.  For now this will cover the most common needs. Optional: what type of storage medium should back this directory. The default is \"\" which means to use the node's default medium.",
	}
}

func (EndpointAddress) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "EndpointAddress is a tuple that describes single IP address.",
		"IP":        "The IP of this endpoint.",
		"TargetRef": "Optional: The kubernetes object related to the entry point.",
	}
}

func (EndpointPort) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "EndpointPort is a tuple that describes a single port.",
		"Name":     "The name of this port (corresponds to ServicePort.Name).  Optional if only one port is defined.  Must be a DNS_LABEL.",
		"Port":     "The port number.",
		"Protocol": "The IP protocol for this port.",
	}
}

func (EndpointSubset) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "EndpointSubset is a group of addresses with a common set of ports.  The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:\n  {\n    Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n    Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n  }\nThe resulting set of endpoints can be viewed as:\n    a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\n    b: [ 10.10.1.1:309, 10.10.2.2:309 ]",
	}
}

func (Endpoints) SwaggerDoc() map[string]string {
	return map[string]string{
		"":        "Endpoints is a collection of endpoints that implement the actual service.  Example:\n  Name: \"mysvc\",\n  Subsets: [\n    {\n      Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n      Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n    {\n      Addresses: [{\"ip\": \"10.10.3.3\"}],\n      Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n    },\n ]",
		"Subsets": "The set of all endpoints is the union of all subsets.",
	}
}

func (EndpointsList) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "EndpointsList is a list of endpoints.",
	}
}

func (EnvVar) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "EnvVar represents an environment variable present in a Container.",
		"name":      "Required: This must be a C_IDENTIFIER.",
		"value":     "Optional: no more than one of the following may be specified. Optional: Defaults to \"\"; variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables.  If a variable cannot be resolved, the reference in the input string will be unchanged.  The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME).  Escaped references will never be expanded, regardless of whether the variable exists or not.",
		"valueFrom": "Optional: Specifies a source the value of this var should come from.",
	}
}

func (EnvVarSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "EnvVarSource represents a source for the value of an EnvVar.",
		"fieldRef": "Required: Selects a field of the pod; only name and namespace are supported.",
	}
}

func (Event) SwaggerDoc() map[string]string {
	return map[string]string{
		"":               "Event is a report of an event somewhere in the cluster.",
		"involvedObject": "Required. The object that this event is about.",
		"reason":         "Optional; this should be a short, machine understandable string that gives the reason for this event being generated. For example, if the event is reporting that a container can't start, the Reason might be \"ImageNotFound\".",
		"message":        "Optional. A human-readable description of the status of this operation.",
		"source":         "Optional. The component reporting this event. Should be a short machine understandable string.",
		"firstTimestamp": "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)",
		"lastTimestamp":  "The time at which the most recent occurrence of this event was recorded.",
		"count":          "The number of times this event has occurred.",
	}
}

func (EventList) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "EventList is a list of events.",
	}
}

func (EventSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"component": "Component from which the event is generated.",
		"host":      "Host name on which the event is generated.",
	}
}

func (ExecAction) SwaggerDoc() map[string]string {
	return map[string]string{
		"":        "ExecAction describes a \"run in container\" action.",
		"command": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem.  The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work.  To use a shell, you need to explicitly call out to that shell.",
	}
}

func (GCEPersistentDiskVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "GCEPersistentDiskVolumeSource represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist and be formatted before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once.",
		"pdName":    "Unique name of the PD resource. Used to identify the disk in GCE",
		"fsType":    "Required: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\"",
		"partition": "Optional: Partition on the disk to mount. If omitted, kubelet will attempt to mount the device name. Ex. For /dev/sda1, this field is \"1\", for /dev/sda, this field is 0 or empty.",
		"readOnly":  "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
	}
}

func (GitRepoVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":           "GitRepoVolumeSource represents a volume that is pulled from git when the pod is created.",
		"repository": "Repository URL",
		"revision":   "Commit hash, this is optional",
	}
}

func (GlusterfsVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "GlusterfsVolumeSource represents a Glusterfs Mount that lasts the lifetime of a pod",
		"endpoints": "Required: EndpointsName is the endpoint name that details Glusterfs topology",
		"path":      "Required: Path is the Glusterfs volume path",
		"readOnly":  "Optional: Defaults to false (read/write). ReadOnly here will force the Glusterfs to be mounted with read-only permissions",
	}
}

func (HTTPGetAction) SwaggerDoc() map[string]string {
	return map[string]string{
		"":       "HTTPGetAction describes an action based on HTTP Get requests.",
		"path":   "Optional: Path to access on the HTTP server.",
		"port":   "Required: Name or number of the port to access on the container.",
		"host":   "Optional: Host name to connect to, defaults to the pod IP.",
		"scheme": "Optional: Scheme to use for connecting to the host, defaults to HTTP.",
	}
}

func (Handler) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "Handler defines a specific action that should be taken",
		"exec":      "One and only one of the following should be specified. Exec specifies the action to take.",
		"httpGet":   "HTTPGet specifies the http request to perform.",
		"tcpSocket": "TCPSocket specifies an action involving a TCP port.",
	}
}

func (HostPathVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "HostPathVolumeSource represents a host directory mapped into a pod.",
	}
}

func (ISCSIVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":             "A ISCSI Disk can only be mounted as read/write once.",
		"targetPortal": "Required: iSCSI target portal the portal is either an IP or ip_addr:port if port is other than default (typically TCP ports 860 and 3260)",
		"iqn":          "Required:  target iSCSI Qualified Name",
		"lun":          "Required: iSCSI target lun number",
		"fsType":       "Required: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\"",
		"readOnly":     "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
	}
}

func (Lifecycle) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "Lifecycle describes actions that the management system should take in response to container lifecycle events.  For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
		"postStart": "PostStart is called immediately after a container is created.  If the handler fails, the container is terminated and restarted.",
		"preStop":   "PreStop is called immediately before a container is terminated.  The reason for termination is passed to the handler.  Regardless of the outcome of the handler, the container is eventually terminated.",
	}
}

func (LimitRange) SwaggerDoc() map[string]string {
	return map[string]string{
		"":     "LimitRange sets resource usage limits for each kind of resource in a Namespace",
		"spec": "Spec defines the limits enforced",
	}
}

func (LimitRangeItem) SwaggerDoc() map[string]string {
	return map[string]string{
		"":        "LimitRangeItem defines a min/max usage limit for any resource that matches on kind",
		"type":    "Type of resource that this limit applies to",
		"max":     "Max usage constraints on this kind by resource name",
		"min":     "Min usage constraints on this kind by resource name",
		"default": "Default usage constraints on this kind by resource name",
	}
}

func (LimitRangeList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":      "LimitRangeList is a list of LimitRange items.",
		"items": "Items is a list of LimitRange objects",
	}
}

func (LimitRangeSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":       "LimitRangeSpec defines a min/max usage limit for resources that match on kind",
		"limits": "Limits is the list of LimitRangeItem objects that are enforced",
	}
}

func (List) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "List holds a list of objects, which may not be known by the server.",
	}
}

func (ListMeta) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
		"selfLink":        "SelfLink is a URL representing this object.",
		"resourceVersion": "An opaque value that represents the version of this response for use with optimistic concurrency and change monitoring endpoints.  Clients must treat these values as opaque and values may only be valid for a particular resource or set of resources. Only servers will generate resource versions.",
	}
}

func (ListOptions) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                "ListOptions is the query options to a standard REST list call, and has future support for watch calls.",
		"LabelSelector":   "A selector based on labels",
		"FieldSelector":   "A selector based on fields",
		"Watch":           "If true, watch for changes to this list",
		"ResourceVersion": "The resource version to watch (no effect on list yet)",
	}
}

func (LoadBalancerIngress) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.",
		"ip":       "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)",
		"hostname": "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)",
	}
}

func (LoadBalancerStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":        "LoadBalancerStatus represents the status of a load-balancer",
		"ingress": "Ingress is a list containing ingress points for the load-balancer; traffic intended for the service should be sent to these ingress points.",
	}
}

func (LocalObjectReference) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
	}
}

func (NFSVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "NFSVolumeSource represents an NFS Mount that lasts the lifetime of a pod",
		"server":   "Server is the hostname or IP address of the NFS server",
		"path":     "Path is the exported NFS share",
		"readOnly": "Optional: Defaults to false (read/write). ReadOnly here will force the NFS export to be mounted with read-only permissions",
	}
}

func (Namespace) SwaggerDoc() map[string]string {
	return map[string]string{
		"":       "A namespace provides a scope for Names. Use of multiple namespaces is optional",
		"spec":   "Spec defines the behavior of the Namespace.",
		"status": "Status describes the current status of a Namespace",
	}
}

func (NamespaceList) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "NamespaceList is a list of Namespaces.",
	}
}

func (NamespaceSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":           "NamespaceSpec describes the attributes on a Namespace",
		"Finalizers": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage",
	}
}

func (NamespaceStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":      "NamespaceStatus is information about the current status of a Namespace.",
		"phase": "Phase is the current lifecycle phase of the namespace.",
	}
}

func (Node) SwaggerDoc() map[string]string {
	return map[string]string{
		"":       "Node is a worker node in Kubernetes The name of the node according to etcd is in ObjectMeta.Name.",
		"spec":   "Spec defines the behavior of a node.",
		"status": "Status describes the current status of a Node",
	}
}

func (NodeList) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "NodeList is a list of nodes.",
	}
}

func (NodeResources) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "NodeResources is an object for conveying resource information about a node. see http://docs.k8s.io/design/resources.md for more details.",
		"capacity": "Capacity represents the available resources of a node",
	}
}

func (NodeSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":              "NodeSpec describes the attributes that a node is created with.",
		"podCIDR":       "PodCIDR represents the pod IP range assigned to the node Note: assigning IP ranges to nodes might need to be revisited when we support migratable IPs.",
		"externalID":    "External ID of the node assigned by some machine database (e.g. a cloud provider)",
		"providerID":    "ID of the node assigned by the cloud provider Note: format is \"<ProviderName>://<ProviderSpecificNodeID>\"",
		"unschedulable": "Unschedulable controls node schedulability of new pods. By default node is schedulable.",
	}
}

func (NodeStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":           "NodeStatus is information about the current status of a node.",
		"capacity":   "Capacity represents the available resources of a node.",
		"phase":      "NodePhase is the current lifecycle phase of the node.",
		"conditions": "Conditions is an array of current node conditions.",
		"addresses":  "Queried from cloud provider, if available.",
		"nodeInfo":   "NodeSystemInfo is a set of ids/uuids to uniquely identify the node",
	}
}

func (NodeSystemInfo) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                        "NodeSystemInfo is a set of ids/uuids to uniquely identify the node.",
		"machineID":               "MachineID is the machine-id reported by the node",
		"systemUUID":              "SystemUUID is the system-uuid reported by the node",
		"bootID":                  "BootID is the boot-id reported by the node",
		"kernelVersion":           "Kernel version reported by the node",
		"osImage":                 "OS image used reported by the node",
		"containerRuntimeVersion": "Container runtime version reported by the node",
		"kubeletVersion":          "Kubelet version reported by the node",
		"kubeProxyVersion":        "Kube-proxy version reported by the node",
	}
}

func (ObjectFieldSelector) SwaggerDoc() map[string]string {
	return map[string]string{
		"":           "ObjectFieldSelector selects an APIVersioned field of an object.",
		"apiVersion": "Required: Version of the schema the FieldPath is written in terms of. If no value is specified, it will be defaulted to the APIVersion of the enclosing object.",
		"fieldPath":  "Required: Path of the field to select in the specified API version",
	}
}

func (ObjectMeta) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                  "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
		"name":              "Name is unique within a namespace.  Name is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition.",
		"generateName":      "GenerateName indicates that the name should be made unique by the server prior to persisting it. A non-empty value for the field indicates the name will be made unique (and the name returned to the client will be different than the name passed). The value of this field will be combined with a unique suffix on the server if the Name field has not been provided. The provided value must be valid within the rules for Name, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified, and Name is not present, the server will NOT return a 409 if the generated name exists - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).",
		"namespace":         "Namespace defines the space within which name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.",
		"selfLink":          "SelfLink is a URL representing this object.",
		"uid":               "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.",
		"resourceVersion":   "An opaque value that represents the version of this resource. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and values may only be valid for a particular resource or set of resources. Only servers will generate resource versions.",
		"generation":        "A sequence number representing a specific generation of the desired state. Currently only implemented by replication controllers.",
		"creationTimestamp": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
		"deletionTimestamp": "DeletionTimestamp is the time after which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container.",
		"labels":            "Labels are key value pairs that may be used to scope and select individual resources. Label keys are of the form:\n    label-key ::= prefixed-name | name\n    prefixed-name ::= prefix '/' name\n    prefix ::= DNS_SUBDOMAIN\n    name ::= DNS_LABEL\nThe prefix is optional.  If the prefix is not specified, the key is assumed to be private to the user.  Other system components that wish to use labels must specify a prefix.  The \"kubernetes.io/\" prefix is reserved for use by kubernetes components.",
		"annotations":       "Annotations are unstructured key value data stored with a resource that may be set by external tooling. They are not queryable and should be preserved when modifying objects.  Annotation keys have the same formatting restrictions as Label keys. See the comments on Labels for details.",
	}
}

func (ObjectReference) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "ObjectReference contains enough information to let you inspect or modify the referred object.",
		"fieldPath": "Optional. If referring to a piece of an object instead of an entire object, this string should contain information to identify the sub-object. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
	}
}

func (PersistentVolume) SwaggerDoc() map[string]string {
	return map[string]string{
		"spec":   "Spec defines a persistent volume owned by the cluster",
		"status": "Status represents the current information about persistent volume.",
	}
}

func (PersistentVolumeClaim) SwaggerDoc() map[string]string {
	return map[string]string{
		"":       "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
		"spec":   "Spec defines the volume requested by a pod author",
		"status": "Status represents the current information about a claim",
	}
}

func (PersistentVolumeClaimSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":            "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
		"accessModes": "Contains the types of access modes required",
		"resources":   "Resources represents the minimum resources required",
		"volumeName":  "VolumeName is the binding reference to the PersistentVolume backing this claim",
	}
}

func (PersistentVolumeClaimStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"phase":       "Phase represents the current phase of PersistentVolumeClaim",
		"accessModes": "AccessModes contains all ways the volume backing the PVC can be mounted",
		"capacity":    "Represents the actual resources of the underlying volume",
	}
}

func (PersistentVolumeClaimVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"claimName": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume",
		"readOnly":  "Optional: Defaults to false (read/write).  ReadOnly here will force the ReadOnly setting in VolumeMounts",
	}
}

func (PersistentVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                     "Similar to VolumeSource but meant for the administrator who creates PVs. Exactly one of its members must be set.",
		"gcePersistentDisk":    "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod.",
		"awsElasticBlockStore": "AWSElasticBlockStore represents an AWS EBS disk that is attached to a kubelet's host machine and then exposed to the pod.",
		"hostPath":             "HostPath represents a directory on the host. This is useful for development and testing only. on-host storage is not supported in any way",
		"glusterfs":            "Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod",
		"nfs":                  "NFS represents an NFS mount on the host that shares a pod's lifetime",
		"rbd":                  "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime",
		"iscsi":                "ISCSIVolumeSource represents an ISCSI resource that is attached to a kubelet's host machine and then exposed to the pod.",
	}
}

func (PersistentVolumeSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"capacity":                      "Resources represents the actual resources of the volume",
		"accessModes":                   "AccessModes contains all ways the volume can be mounted",
		"claimRef":                      "ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. ClaimRef is expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC.",
		"persistentVolumeReclaimPolicy": "Optional: what happens to a persistent volume when released from its claim.",
	}
}

func (PersistentVolumeStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"phase":   "Phase indicates if a volume is available, bound to a claim, or released by a claim",
		"message": "A human-readable message indicating details about why the volume is in this state.",
		"reason":  "Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI",
	}
}

func (Pod) SwaggerDoc() map[string]string {
	return map[string]string{
		"":       "Pod is a collection of containers, used as either input (create, update) or as output (list, get).",
		"spec":   "Spec defines the behavior of a pod.",
		"status": "Status represents the current information about a pod. This data may not be up to date.",
	}
}

func (PodAttachOptions) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "PodAttachOptions is the query options to a Pod's remote attach call",
		"stdin":     "Stdin if true indicates that stdin is to be redirected for the attach call",
		"stdout":    "Stdout if true indicates that stdout is to be redirected for the attach call",
		"stderr":    "Stderr if true indicates that stderr is to be redirected for the attach call",
		"tty":       "TTY if true indicates that a tty will be allocated for the attach call",
		"container": "Container to attach to.",
	}
}

func (PodExecOptions) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "PodExecOptions is the query options to a Pod's remote exec call",
		"Stdin":     "Stdin if true indicates that stdin is to be redirected for the exec call",
		"Stdout":    "Stdout if true indicates that stdout is to be redirected for the exec call",
		"Stderr":    "Stderr if true indicates that stderr is to be redirected for the exec call",
		"TTY":       "TTY if true indicates that a tty will be allocated for the exec call",
		"Container": "Container in which to execute the command.",
		"Command":   "Command is the remote command to execute; argv array; not executed within a shell.",
	}
}

func (PodList) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "PodList is a list of Pods.",
	}
}

func (PodLogOptions) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "PodLogOptions is the query options for a Pod's logs REST call",
		"Container": "Container for which to return logs",
		"Follow":    "If true, follow the logs for the pod",
		"Previous":  "If true, return previous terminated container logs",
	}
}

func (PodProxyOptions) SwaggerDoc() map[string]string {
	return map[string]string{
		"":     "PodProxyOptions is the query options to a Pod's proxy call",
		"Path": "Path is the URL path to use for the current proxy request",
	}
}

func (PodSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                              "PodSpec is a description of a pod",
		"containers":                    "Required: there must be at least one container in a pod.",
		"terminationGracePeriodSeconds": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.",
		"activeDeadlineSeconds":         "Optional duration in seconds relative to the StartTime that the pod may be active on a node before the system actively tries to terminate the pod; value must be positive integer",
		"dnsPolicy":                     "Required: Set DNS policy.",
		"nodeSelector":                  "NodeSelector is a selector which must be true for the pod to fit on a node",
		"serviceAccountName":            "ServiceAccountName is the name of the ServiceAccount to use to run this pod The pod will be allowed to use secrets referenced by the ServiceAccount",
		"nodeName":                      "NodeName is a request to schedule this pod onto a specific node.  If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.",
		"hostNetwork":                   "Uses the host's network namespace. If this option is set, the ports that will be used must be specified. Optional: Default to false.",
		"imagePullSecrets":              "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use.  For example, in the case of docker, only DockerConfig type secrets are honored.",
	}
}

func (PodStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                  "PodStatus represents information about the status of a pod. Status may trail the actual state of a system.",
		"message":           "A human readable message indicating details about why the pod is in this state.",
		"reason":            "A brief CamelCase message indicating details about why the pod is in this state. e.g. 'OutOfDisk'",
		"startTime":         "Date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.",
		"containerStatuses": "The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. This output format is *not* final and should not be relied upon. when we have done this.",
	}
}

func (PodStatusResult) SwaggerDoc() map[string]string {
	return map[string]string{
		"":       "PodStatusResult is a wrapper for PodStatus returned by kubelet that can be encode/decoded",
		"status": "Status represents the current information about a pod. This data may not be up to date.",
	}
}

func (PodTemplate) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "PodTemplate describes a template for creating copies of a predefined pod.",
		"template": "Template defines the pods that will be created from this pod template",
	}
}

func (PodTemplateList) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "PodTemplateList is a list of PodTemplates.",
	}
}

func (PodTemplateSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "PodTemplateSpec describes the data a pod should have when created from a template",
		"metadata": "Metadata of the pods created from this template.",
		"spec":     "Spec defines the behavior of a pod.",
	}
}

func (Probe) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "Probe describes a liveness probe to be examined to the container.",
		"initialDelaySeconds": "Length of time before health checking is activated.  In seconds.",
		"timeoutSeconds":      "Length of time before health checking times out.  In seconds.",
	}
}

func (RBDVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "RBDVolumeSource represents a Rados Block Device Mount that lasts the lifetime of a pod",
		"monitors":  "Required: CephMonitors is a collection of Ceph monitors",
		"image":     "Required: RBDImage is the rados image name",
		"fsType":    "Required: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\"",
		"pool":      "Optional: RadosPool is the rados pool name,default is rbd",
		"user":      "Optional: RBDUser is the rados user name, default is admin",
		"keyring":   "Optional: Keyring is the path to key ring for RBDUser, default is /etc/ceph/keyring",
		"secretRef": "Optional: SecretRef is name of the authentication secret for RBDUser, default is empty.",
		"readOnly":  "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
	}
}

func (RangeAllocation) SwaggerDoc() map[string]string {
	return map[string]string{
		"":      "RangeAllocation is an opaque API object (not exposed to end users) that can be persisted to record the global allocation state of the cluster. The schema of Range and Data generic, in that Range should be a string representation of the inputs to a range (for instance, for IP allocation it might be a CIDR) and Data is an opaque blob understood by an allocator which is typically a binary range.  Consumers should use annotations to record additional information (schema version, data encoding hints). A range allocation should *ALWAYS* be recreatable at any time by observation of the cluster, thus the object is less strongly typed than most.",
		"range": "A string representing a unique label for a range of resources, such as a CIDR \"10.0.0.0/8\" or port range \"10000-30000\". Range is not strongly schema'd here. The Range is expected to define a start and end unless there is an implicit end.",
		"data":  "A byte array representing the serialized state of a range allocation. Additional clarifiers on the type or format of data should be represented with annotations. For IP allocations, this is represented as a bit array starting at the base IP of the CIDR in Range, with each bit representing a single allocated address (the fifth bit on CIDR 10.0.0.0/8 is 10.0.0.4).",
	}
}

func (ReplicationController) SwaggerDoc() map[string]string {
	return map[string]string{
		"":       "ReplicationController represents the configuration of a replication controller.",
		"spec":   "Spec defines the desired behavior of this replication controller.",
		"status": "Status is the current status of this replication controller. This data may be out of date by some window of time.",
	}
}

func (ReplicationControllerList) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "ReplicationControllerList is a collection of replication controllers.",
	}
}

func (ReplicationControllerSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "ReplicationControllerSpec is the specification of a replication controller. As the internal representation of a replication controller, it may have either a TemplateRef or a Template set.",
		"replicas": "Replicas is the number of desired replicas.",
		"selector": "Selector is a label query over pods that should match the Replicas count.",
		"template": "Template is the object that describes the pod that will be created if insufficient replicas are detected. Internally, this takes precedence over a TemplateRef. Must be set before converting to a v1beta1 or v1beta2 API object.",
	}
}

func (ReplicationControllerStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                   "ReplicationControllerStatus represents the current status of a replication controller.",
		"replicas":           "Replicas is the number of actual replicas.",
		"observedGeneration": "ObservedGeneration is the most recent generation observed by the controller.",
	}
}

func (ResourceQuota) SwaggerDoc() map[string]string {
	return map[string]string{
		"":       "ResourceQuota sets aggregate quota restrictions enforced per namespace",
		"spec":   "Spec defines the desired quota",
		"status": "Status defines the actual enforced quota and its current usage",
	}
}

func (ResourceQuotaList) SwaggerDoc() map[string]string {
	return map[string]string{
		"":      "ResourceQuotaList is a list of ResourceQuota items",
		"items": "Items is a list of ResourceQuota objects",
	}
}

func (ResourceQuotaSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":     "ResourceQuotaSpec defines the desired hard limits to enforce for Quota",
		"hard": "Hard is the set of desired hard limits for each named resource",
	}
}

func (ResourceQuotaStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":     "ResourceQuotaStatus defines the enforced hard limits and observed use",
		"hard": "Hard is the set of enforced hard limits for each named resource",
		"used": "Used is the current observed total usage of the resource in the namespace",
	}
}

func (ResourceRequirements) SwaggerDoc() map[string]string {
	return map[string]string{
		"":         "ResourceRequirements describes the compute resource requirements.",
		"limits":   "Limits describes the maximum amount of compute resources allowed.",
		"requests": "Requests describes the minimum amount of compute resources required. If Request is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value",
	}
}

func (SELinuxOptions) SwaggerDoc() map[string]string {
	return map[string]string{
		"":      "SELinuxOptions are the labels to be applied to the container.",
		"user":  "SELinux user label",
		"role":  "SELinux role label",
		"type":  "SELinux type label",
		"level": "SELinux level label.",
	}
}

func (Secret) SwaggerDoc() map[string]string {
	return map[string]string{
		"":     "Secret holds secret data of a certain type.  The total bytes of the values in the Data field must be less than MaxSecretSize bytes.",
		"data": "Data contains the secret data.  Each key must be a valid DNS_SUBDOMAIN or leading dot followed by valid DNS_SUBDOMAIN. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here.",
		"type": "Used to facilitate programmatic handling of secret data.",
	}
}

func (SecretVolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":           "SecretVolumeSource adapts a Secret into a VolumeSource.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names.",
		"secretName": "Name of the secret in the pod's namespace to use",
	}
}

func (SecurityContext) SwaggerDoc() map[string]string {
	return map[string]string{
		"":               "SecurityContext holds security configuration that will be applied to a container.  SecurityContext contains duplication of some existing fields from the Container resource.  These duplicate fields will be populated based on the Container configuration if they are not set.  Defining them on both the Container AND the SecurityContext will result in an error.",
		"capabilities":   "Capabilities are the capabilities to add/drop when running the container",
		"privileged":     "Run the container in privileged mode",
		"seLinuxOptions": "SELinuxOptions are the labels to be applied to the container and volumes",
		"runAsUser":      "RunAsUser is the UID to run the entrypoint of the container process.",
		"RunAsNonRoot":   "RunAsNonRoot indicates that the container should be run as a non-root user.  If the RunAsUser field is not explicitly set then the kubelet may check the image for a specified user or perform defaulting to specify a user.",
	}
}

func (Service) SwaggerDoc() map[string]string {
	return map[string]string{
		"":       "Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.",
		"spec":   "Spec defines the behavior of a service.",
		"status": "Status represents the current status of a service.",
	}
}

func (ServiceAccount) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                 "ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets",
		"secrets":          "Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount",
		"imagePullSecrets": "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount.  ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet.",
	}
}

func (ServiceAccountList) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "ServiceAccountList is a list of ServiceAccount objects",
	}
}

func (ServiceList) SwaggerDoc() map[string]string {
	return map[string]string{
		"": "ServiceList holds a list of services.",
	}
}

func (ServicePort) SwaggerDoc() map[string]string {
	return map[string]string{
		"name":       "Optional if only one ServicePort is defined on this service: The name of this port within the service.  This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names.  This maps to the 'Name' field in EndpointPort objects.",
		"protocol":   "The IP protocol for this port.  Supports \"TCP\" and \"UDP\".",
		"port":       "The port that will be exposed on the service.",
		"targetPort": "Optional: The target port on pods selected by this service.  If this is a string, it will be looked up as a named port in the target Pod's container ports.  If this is not specified, the default value is the sames as the Port field (an identity map).",
		"nodePort":   "The port on each node on which this service is exposed. Default is to auto-allocate a port if the ServiceType of this Service requires one.",
	}
}

func (ServiceSpec) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                    "ServiceSpec describes the attributes that a user creates on a service",
		"ports":               "Required: The list of ports that are exposed by this service.",
		"selector":            "This service will route traffic to pods having labels matching this selector. If empty or not present, the service is assumed to have endpoints set by an external process and Kubernetes will not modify those endpoints.",
		"clusterIP":           "ClusterIP is usually assigned by the master.  If specified by the user we will try to respect it or else fail the request.  This field can not be changed by updates. Valid values are None, empty string (\"\"), or a valid IP address None can be specified for headless services when proxying is not required",
		"type":                "Type determines how the service will be exposed.  Valid options: ClusterIP, NodePort, LoadBalancer",
		"deprecatedPublicIPs": "DeprecatedPublicIPs are deprecated and silently ignored. Old behaviour: PublicIPs are used by external load balancers, or can be set by users to handle external traffic that arrives at a node.",
		"sessionAffinity":     "Required: Supports \"ClientIP\" and \"None\".  Used to maintain session affinity.",
	}
}

func (ServiceStatus) SwaggerDoc() map[string]string {
	return map[string]string{
		"":             "ServiceStatus represents the current status of a service",
		"loadBalancer": "LoadBalancer contains the current status of the load-balancer, if one is present.",
	}
}

func (Status) SwaggerDoc() map[string]string {
	return map[string]string{
		"":        "Status is a return value for calls that don't return other objects. import both.",
		"status":  "One of: \"Success\" or \"Failure\"",
		"message": "A human-readable description of the status of this operation.",
		"reason":  "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
		"details": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.",
		"code":    "Suggested HTTP return code for this status, 0 if not set.",
	}
}

func (StatusCause) SwaggerDoc() map[string]string {
	return map[string]string{
		"":        "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
		"reason":  "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
		"message": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
		"field":   "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
	}
}

func (StatusDetails) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                  "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
		"name":              "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
		"kind":              "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind.",
		"causes":            "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
		"retryAfterSeconds": "If specified, the time in seconds before the operation should be retried.",
	}
}

func (TCPSocketAction) SwaggerDoc() map[string]string {
	return map[string]string{
		"":     "TCPSocketAction describes an action based on opening a socket",
		"port": "Required: Port to connect to.",
	}
}

func (TypeMeta) SwaggerDoc() map[string]string {
	return map[string]string{
		"":           "TypeMeta describes an individual object in an API response or request with strings representing the type of the object and its API schema version. Structures that are versioned or persisted should inline TypeMeta.",
		"kind":       "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to.",
		"apiVersion": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values.",
	}
}

func (Volume) SwaggerDoc() map[string]string {
	return map[string]string{
		"":     "Volume represents a named volume in a pod that may be accessed by any containers in the pod.",
		"name": "Required: This must be a DNS_LABEL.  Each volume in a pod must have a unique name.",
	}
}

func (VolumeMount) SwaggerDoc() map[string]string {
	return map[string]string{
		"":          "VolumeMount describes a mounting of a Volume within a container.",
		"name":      "Required: This must match the Name of a Volume [above].",
		"readOnly":  "Optional: Defaults to false (read-write).",
		"mountPath": "Required.",
	}
}

func (VolumeSource) SwaggerDoc() map[string]string {
	return map[string]string{
		"":                      "VolumeSource represents the source location of a volume to mount. Only one of its members may be specified.",
		"hostPath":              "HostPath represents file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this.",
		"emptyDir":              "EmptyDir represents a temporary directory that shares a pod's lifetime.",
		"gcePersistentDisk":     "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod.",
		"awsElasticBlockStore":  "AWSElasticBlockStore represents an AWS EBS disk that is attached to a kubelet's host machine and then exposed to the pod.",
		"gitRepo":               "GitRepo represents a git repository at a particular revision.",
		"secret":                "Secret represents a secret that should populate this volume.",
		"nfs":                   "NFS represents an NFS mount on the host that shares a pod's lifetime",
		"iscsi":                 "ISCSIVolumeSource represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod.",
		"glusterfs":             "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime",
		"persistentVolumeClaim": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace",
		"rbd": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime",
	}
}

// AUTO-GENERATED FUNCTIONS END HERE
